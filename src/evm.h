#ifndef evm_h
#define evm_h

#include <stdint.h>

typedef enum {
    OP_STOP = 0,
    OP_ADD,
    OP_MUL,
    OP_SUB,
    OP_DIV,
    OP_SDIV,
    OP_MOD,
    OP_SMOD,
    OP_ADDMOD,
    OP_MULMOD,
    OP_EXP,
    OP_SIGNEXTEND,
    __OP_INVALID0,
    OP_LT,
    OP_GT,
    OP_SLT,
    OP_SGT,
    OP_EQ,
    OP_ISZERO,
    OP_AND,
    OP_OR,
    OP_XOR,
    OP_NOT,
    OP_BYTE,
    OP_SHL,
    OP_SHR,
    OP_SAR,
    __OP_INVALID1,
    OP_SHA3,
    __OP_INVALID2,
    OP_ADDRESS,
    OP_BALANCE,
    OP_ORIGIN,
    OP_CALLER,
    OP_CALLVALUE,
    OP_CALLDATALOAD,
    OP_CALLDATASIZE,
    OP_CALLDATACOPY,
    OP_CODESIZE,
    OP_CODECOPY,
    OP_GASPRICE,
    OP_EXTCODESIZE,
    OP_EXTCODECOPY,
    OP_RETURNDATASIZE,
    OP_RETURNDATACOPY,
    OP_EXTCODEHASH,
    OP_BLOCKHASH,
    OP_COINBASE,
    OP_TIMESTAMP,
    OP_NUMBER,
    OP_DIFFICULTY,
    OP_GASLIMIT,
    OP_CHAINID,
    OP_SELFBALANCE,
    OP_BASEFEE,
    __OP_INVALID3,
    OP_POP,
    OP_MLOAD,
    OP_MSTORE,
    OP_MSTORE8,
    OP_SLOAD,
    OP_SSTORE,
    OP_JUMP,
    OP_JUMPI,
    OP_PC,
    OP_MSIZE,
    OP_GAS,
    OP_JUMPDEST,
    OP___OP_INVALID5,
    OP_PUSH1,
    OP_PUSH2,
    OP_PUSH3,
    OP_PUSH4,
    OP_PUSH5,
    OP_PUSH6,
    OP_PUSH7,
    OP_PUSH8,
    OP_PUSH9,
    OP_PUSH10,
    OP_PUSH11,
    OP_PUSH12,
    OP_PUSH13,
    OP_PUSH14,
    OP_PUSH15,
    OP_PUSH16,
    OP_PUSH17,
    OP_PUSH18,
    OP_PUSH19,
    OP_PUSH20,
    OP_PUSH21,
    OP_PUSH22,
    OP_PUSH23,
    OP_PUSH24,
    OP_PUSH25,
    OP_PUSH26,
    OP_PUSH27,
    OP_PUSH28,
    OP_PUSH29,
    OP_PUSH30,
    OP_PUSH31,
    OP_PUSH32,
    OP_DUP1,
    OP_DUP2,
    OP_DUP3,
    OP_DUP4,
    OP_DUP5,
    OP_DUP6,
    OP_DUP7,
    OP_DUP8,
    OP_DUP9,
    OP_DUP10,
    OP_DUP11,
    OP_DUP12,
    OP_DUP13,
    OP_DUP14,
    OP_DUP15,
    OP_DUP16,
    OP_SWAP1,
    OP_SWAP2,
    OP_SWAP3,
    OP_SWAP4,
    OP_SWAP5,
    OP_SWAP6,
    OP_SWAP7,
    OP_SWAP8,
    OP_SWAP9,
    OP_SWAP10,
    OP_SWAP11,
    OP_SWAP12,
    OP_SWAP13,
    OP_SWAP14,
    OP_SWAP15,
    OP_SWAP16,
    OP_LOG0,
    OP_LOG1,
    OP_LOG2,
    OP_LOG3,
    OP_LOG4,
    OP___OP_INVALID6,
    OP_CREATE,
    OP_CALL,
    OP_CALLCODE,
    OP_RETURN,
    OP_DELEGATECALL,
    OP_CREATE2,
    OP___OP_INVALID7,
    OP_STATICCALL,
    OP___OP_INVALID8,
    OP_REVERT,
    OP___OP_INVALID9,
    OP_SELFDESTRUCT
} OpCode;

#define STACK_MAX 256

typedef struct {
    // Bytecode + program counter
    uint8_t *code;
    uint8_t *pc;

    // Stack for manipulating data
    int32_t stack[STACK_MAX];
    int32_t *stack_top;

    // Separate bytecode/constants for memory efficiency
    // no counter needed since iterated through linearly (no JUMPs)
    int32_t *constants;
} VM;

void vm_init(VM *vm, uint8_t *code, int32_t *constants);
int32_t vm_eval(VM *vm);

#endif